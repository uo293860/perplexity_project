package com.example.petmanagement.service;

import com.example.petmanagement.dto.PetNameBreedDto;
import com.example.petmanagement.entity.Pet;
import com.example.petmanagement.repository.PetRepository;
import com.example.petmanagement.exception.*;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@AllArgsConstructor
public class PetServiceImpl implements PetService {

    //@Autowired - This was generated by Perplexity, but it is better practice to use the @AllArgsConstructor
    private PetRepository petRepository;

    @Override
    public Pet createPet(Pet pet) {
        if (pet.getName() == null || pet.getName().trim().isEmpty()) {
            throw new InvalidPetDataException("Pet name cannot be empty");
        }
        return petRepository.save(pet);
    }

    @Override
    public List<Pet> getAllPets() {
        return petRepository.findAll();
    }

    @Override
    public Pet getPetById(Long id) {
        return petRepository.findById(id)
                .orElseThrow(() -> new PetNotFoundException("Pet not found with id: " + id));
    }

    @Override
    public Pet updatePet(Pet pet) {
        if (petRepository.findById(pet.getId()).isEmpty()) {
            throw new PetNotFoundException("Pet not found with id: " + pet.getId());
        }
        if (pet.getName() == null || pet.getName().trim().isEmpty()) {
            throw new InvalidPetDataException("Pet name cannot be empty");
        }
        if (pet.getAge() < 0) {
            throw new InvalidPetDataException("Pet age cannot be negative");
        }
        return petRepository.save(pet);
    }

    @Override
    public void deletePetById(Long id) {
        if (!petRepository.existsById(id)) {
            throw new PetNotFoundException("Pet not found with id: " + id);
        }
        petRepository.deleteById(id);
    }

    @Override
    @Transactional
    public void deletePetsByName(String name) {
        petRepository.deleteByNameIgnoreCase(name);
    }

    @Override
    public List<Pet> findPetsByAnimalType(String animalType) {
        return petRepository.findByAnimalTypeIgnoreCase(animalType);
    }

    @Override
    public List<Pet> findPetsByBreed(String breed) {
        return petRepository.findByBreedIgnoreCaseOrderByAgeAsc(breed);
    }

    @Override
    public List<PetNameBreedDto> getPetNameAndBreed() {
        return petRepository.findAllPetNameAndBreed();
    }

    @Override
    public Double getAverageAge() {
        return petRepository.findAverageAge();
    }

    @Override
    public Integer getOldestAge() {
        return petRepository.findOldestAge();
    }
}
